package com.zeroone_creative.myzoo.view.activity;import android.app.Activity;import android.content.Intent;import android.content.SharedPreferences;import android.graphics.Bitmap;import android.graphics.Matrix;import android.net.Uri;import android.os.Environment;import android.provider.MediaStore;import android.util.Log;import android.widget.FrameLayout;import android.widget.ImageView;import com.zeroone_creative.myzoo.R;import com.zeroone_creative.myzoo.controller.util.ImageUtil;import com.zeroone_creative.myzoo.model.system.BitmapHolder;import com.zeroone_creative.myzoo.model.system.UriUtil;import com.zeroone_creative.myzoo.view.widget.TrimView;import org.androidannotations.annotations.AfterViews;import org.androidannotations.annotations.Click;import org.androidannotations.annotations.EActivity;import org.androidannotations.annotations.ViewById;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.text.DecimalFormat;import java.util.ArrayList;@EActivity(R.layout.activity_triming)public class TrimingActivity extends Activity {    private TrimView mTrimView;    @ViewById(R.id.triming_framelayout)    FrameLayout mFrameLayout;    @ViewById(R.id.triming_imageview)    ImageView mImageView;    private Bitmap mOriginalBitmap;    private float mScale;    private static int GET_IMAGE_CAMERA = 201;    private static Uri mImageUri;	@AfterViews    void onAfterView() {		System.gc();        findViewById(R.id.triming_button).setEnabled(false);        runchCamera();    }    private void runchCamera() {        mImageUri = UriUtil.getPhotoUri(getApplicationContext());        Intent intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);        intent.addCategory(Intent.CATEGORY_DEFAULT);        intent.putExtra(MediaStore.EXTRA_OUTPUT, mImageUri);        startActivityForResult(intent, GET_IMAGE_CAMERA);    }    @Click(R.id.triming_button)    void onTriming() {        ArrayList<Integer> _al = mTrimView.getTrimData();        int _ix = (int)(_al.get(0)/ mScale);        int _iy = (int)(_al.get(1)/ mScale);        int _iwidth = (int)(_al.get(2)/ mScale);        int _iheight = (int)(_al.get(3)/ mScale);        _ix = (_ix>0) ? _ix : 0;        _iy = (_iy>0) ? _iy : 0;        _iwidth = (_iwidth + _ix <  mOriginalBitmap.getWidth()) ? _iwidth :  mOriginalBitmap.getWidth() - _ix;        _iheight = (_iheight + _iy <  mOriginalBitmap.getHeight()) ? _iheight :  mOriginalBitmap.getHeight() - _iy;        BitmapHolder.holdedBitmap = Bitmap.createBitmap( mOriginalBitmap, _ix, _iy, _iwidth, _iheight, null, true);        String imagePath = save(BitmapHolder.holdedBitmap);        if(imagePath != null) {            // 返すデータ(Intent&Bundle)の作成            Intent data = new Intent();            //Bundle bundle = new Bundle();            //bundle.putString("image_path", imagePath);            data.putExtra("image_path", imagePath);            setResult(RESULT_OK, data);            finish();        }    }    String save(Bitmap bitmap){        //sharedpreferenceはデータをずっと保存しておくための仕組み        SharedPreferences prefs = getSharedPreferences("FingarPaintPreferences",MODE_PRIVATE);        int imageNumber = prefs.getInt("imageNumber", 1);        File file = null;        DecimalFormat form = new DecimalFormat("0000");        String dirPath = Environment.getExternalStorageDirectory()+"/MyZoo/";        File outDir = new File(dirPath);        if(!outDir.exists()){            outDir.mkdir();        }        do{            file = new File(dirPath+"img"+form.format(imageNumber)+".png");            imageNumber++;        }while(file.exists());        if(writeImage(file, bitmap)){            SharedPreferences.Editor editor = prefs.edit();            editor.putInt("imageNumber", imageNumber+1);            editor.commit();            return file.getPath();        } else {            return null;        }    }    boolean writeImage(File file, Bitmap bitmap) {        try {            FileOutputStream fo = new FileOutputStream(file);            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fo);            fo.flush();            fo.close();        } catch(Exception e) {            System.out.println(e.getLocalizedMessage());            return false;        }        return true;    }    @Override    protected void onActivityResult(int requestCode, int resultCode, Intent data) {        super.onActivityResult(requestCode, resultCode, data);        if (requestCode == GET_IMAGE_CAMERA) {            if( resultCode == RESULT_OK ) {                Log.d(getClass().getSimpleName(), "onActivityResult");                try {                    mOriginalBitmap = ImageUtil.loadImage(getApplicationContext(), mImageUri);                    setUI();                } catch (IOException e) {                    e.printStackTrace();                }            } else {                finish();            }        }    }    private void setUI() {        mTrimView = new TrimView(getApplicationContext());        mTrimView.setLayoutParams(new FrameLayout.LayoutParams(                FrameLayout.LayoutParams.MATCH_PARENT,                FrameLayout.LayoutParams.MATCH_PARENT));        mFrameLayout.addView(mTrimView);        int _width = mFrameLayout.getWidth();        int _height = mFrameLayout.getHeight();        float _scaleW = (float) _width / (float) mOriginalBitmap.getWidth();        float _scaleH = (float) _height / (float) mOriginalBitmap.getHeight();        mScale = Math.min(_scaleW, _scaleH);        Matrix matrix = new Matrix();        matrix.postScale(mScale, mScale);        Bitmap bitmap = Bitmap.createBitmap(mOriginalBitmap, 0, 0, mOriginalBitmap.getWidth(), mOriginalBitmap.getHeight(), matrix, true);        //Bitmap bitmap = Bitmap.createBitmap(mOriginalBitmap, 0, 0, mImageView.getWidth(), mImageView.getHeight(), matrix, true);        mImageView.setImageBitmap(bitmap);        //mTrimView.sizeSet((int) (mOriginalBitmap.getWidth() * mScale), (int) (mOriginalBitmap.getHeight() * mScale));        mTrimView.sizeSet(_width, _height);        findViewById(R.id.triming_button).setEnabled(true);    }}